#!/bin/bash
#
# ustb-cli: A utility script for USTB web.
#
# Copyright  2020-2025    Shuaicheng Zhu <jason23347@gmail.com>
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION=v2.3

# 0/1, 置0则不会进入CLI模式。
ENABLE_CLI_MODE=1

LOGIN_HOST=202.204.48.82 # 或者 202.204.48.66, login.ustb.edu.cn.

# 存有用户名密码的env文件
ENV_FILE=$HOME/.ustb.env

# 该值可以为空，或者一个合法的IPV6地址。
# 通过 http://cippv6.ustb.edu.cn/get_ip.php 获取的地址通常随MAC绑定。
# 所以，不必每次都重新获取IPV6地址，反正不会变。
DEFAULT_IPV6_ADDRESS=""

# 0/1, 置0则不尝试获取IPV6地址，对确定没有IPV6地址的设备很有用。
ATTEMPT_IPV6=1

# 0/1, 置1则弹出确定窗口是否以当前登录用户重新登录，适用于刷新登录信息的情况。
ALWAYS_USE_DEFAULT_USER=1

# CLOCK settings, do not change.
CLOCK_COLOR="\033[46m"
CLOCK_FORCE_UPDATE=1
# Default: Mon Oct 12  PM
CLOCK_DATE_FORMAT="%a %b %d  %p"
# Width of a digit dot
CLOCK_WIDTH=2
# Spaces between the digits
CLOCK_SPACE=3
# Width for info block in clock mode
CLOCK_INFO_WIDTH=28

SCRIPTNAME=${0##*/}

# Bouncing commands to functions
_ustb_command() {
	# ignore empty lines
	[ $# -lt 1 ] && return

	command=$1
	shift

	# check if command exists
	type -t "ustb_$command" >/dev/null
	[ $? -ne 0 ] && {
		[ "$command" == "exit" ] && exit 0
		echo "$SCRIPTNAME: '$command' is not a command. See '$SCRIPTNAME help'."
		return 1
	}
	# execute
	ustb_$command "$@"
}

# Handle exit
_ustb_bye() {
	printf "Bye-bye.\n"
	tput cnorm
}

_ustb_flow() {
	local -i flow=$(echo ${1:-0} | tr -cd "[0-9\/]" | sed 's/^0\+//')

	if [ $(echo "$flow / 1024 < 1" | bc) -eq 1 ]; then
		printf "%s KB" $flow
	elif [ $(echo "$flow / 1024^2 < 1" | bc) -eq 1 ]; then
		printf "%s MB" $(echo "scale=2; $flow / 1024" | bc)
	elif [ $(echo "$flow / 1024^2 < 900" | bc) -eq 1 ]; then
		printf "%s GB" $(echo "scale=2; $flow / 1024^2" | bc)
	else
		printf "%s TB" $(echo "scale=2; $flow / 1024^3" | bc)
	fi
}

ustb_help() {
	cat <<END
Usage: $SCRIPTNAME [options] <command>
Commands:
login		login to USTB web
logout		logout of USTB web
clock		display a clock with flow info
whoami		show current user
fee		show network fees left
info		show further flow information
speedtest	Test download speed
version		show version and authors
help		show this information

END
}

ustb_version() {
	cat <<INFO
$SCRIPTNAME $VERSION - A utility script for USTB web.

Copyright  2020-2025	Shuaicheng Zhu <jason23347@gmail.com>

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

INFO
}

ustb_whoami() {
	printf "%s" \
		$(curl -s $LOGIN_HOST | grep ';uid' |
			iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")
}

ustb_login() {
	local username password res

	[ -v ENV_FILE ] && [ -f "$ENV_FILE" ] && . $ENV_FILE

	if [ $? -eq 0 ]; then
		username="$USTB_USERNAME"
		password="$USTB_PASSWORD"
	else
		res=$(curl -s $LOGIN_HOST | grep ';uid')
		[ $? -eq 0 ] && username=$(echo "$res" |
			iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")

		# Input username or use default
		if [ -n "$username" ] && [ $ALWAYS_USE_DEFAULT_USER -ne 0 ]; then
			read -n1 -ep "Login as $username? [Y/n]" yn
			[[ $yn =~ N|n ]] &&
				read -ep "Username: " username
		else
			read -ep "Username: " username
		fi

		# Input password
		read -sep "Password: " password
	fi

	# Fetch IPV6 address
	if [ "$ATTEMPT_IPV6" -ge 1 ]; then
		printf "\nfetching IPV6 address..."
		if [ -n "$DEFAULT_IPV6_ADDRESS" ]; then
			ip_addr="$DEFAULT_IPV6_ADDRESS"
		else
			ip_addr=$(curl -s http://cippv6.ustb.edu.cn/get_ip.php |
				grep "gIpV6Addr" |
				sed "s/.*= '//;s/';.*//")
		fi
		printf "$ip_addr.\n"
	fi

	# Do login
	params="callback=suibian&DDDDD=$username&upass=$password&0MKKey=123456&v6ip=$ip_addr"
	curl -s --retry 3 "$LOGIN_HOST/drcom/login?$params" |
		grep '"result":1' 2>&1 1>/dev/null
	[ $? -eq 0 ] &&
		echo "Login succeed." ||
		echo "Login failed."
}

ustb_logout() {
	curl -s "$LOGIN_HOST/F.htm" >/dev/null
	if [ $? -eq 0 ]; then
		echo "Logout succeed."
	else
		echo "Logout failed."
	fi
}

ustb_info() {
	local v4_only=0

	# fetch login page info
	local res=$(curl -s $LOGIN_HOST | iconv -f GBK -t UTF-8)

	# LOGIN check
	echo "$res" | grep "flow=" 2>&1 >/dev/null
	[ $? -ne 0 ] && {
		echo "Login required."
		return 1
	}

	# IPV6 check
	v46m=$(echo "$res" | grep ";v46m=" | sed "s/.*v46m=//;s/;.*//")
	[ $v46m -eq 4 ] || [ $v46m -eq 12 ] || v4_only=1

	# IPV4 flow
	local flow=$(echo "$res" | grep ";flow=" |
		sed "s/.*flow='//;s/'.*//")

	# IPV4 fee
	local fee=$(echo "$res" | grep "fee=" |
		sed "s/.*fee='//;s/'.*//")

	# IPV6 upload flow
	local flow_v6=$(echo "$res" | grep "v6df=" |
		sed "s/.*v6df=//;s/;.*//")/4

	printf "\033[34mIPV4\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep "v4ip=" | sed "s/.*v4ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow)

INFO

	[ $v4_only -eq 1 ] && {
		cat <<INFO
IPV6 not found.

INFO
		return 0
	}

	printf "\033[32mIPV6\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep ";v6ip=" | sed "s/.*;v6ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow_v6)

Flow Saving rate (%):	$(echo "scale=2; $flow_v6 / ($flow_v6 + $flow)" | bc)

INFO
}

ustb_fee() {
	# 校园网计费相关通知链接：https://mp.weixin.qq.com/s/jCoyTvUAFcYFUgV4mdVj-g
	# 网费价格取 0.6120 元/GB，理由详见 fee.md

	local fee
	local cost

	local res=$(curl -s $LOGIN_HOST)

	# cost
	local flow=$(echo "$res" | grep ";flow=" | sed "s/.*flow='//;s/'.*//")

	# First 120G free
	# 125829120 = 120 * 1024 * 1024
	if [ $(echo "$flow <= 125829120" | bc) -eq 1 ]; then
		cost=0
	else
		# 1048576 = 1024 * 1024
		cost=$(awk -v flow="$flow" 'BEGIN { printf "%.2f\n", (flow / 1048576 - 120) * 0.6120 }')
	fi

	# fee
	fee=$(echo "$res" | grep 'fee=' | sed "s/.*fee='//;s/'.*//")
	fee=$(echo "scale=2;$fee/10000" | bc)

	# set color
	if [ $(bc <<<"$cost < 10") -eq 1 ]; then
		COLOR="\033[32m"
	elif [ $(bc <<<"$cost < 30") -eq 1 ]; then
		COLOR="\033[34m"
	elif [ $(bc <<<"$cost < 50") -eq 1 ]; then
		COLOR="\033[33m"
	else
		COLOR="\033[31m"
	fi

	printf "Money Cost: ${COLOR}￥%s\033[0m\n" $cost

	# set color
	_ustb_fee_color $fee
	printf "Money left: ${COLOR}￥%s\033[0m\n\n" $fee
}

_ustb_fee_color() {
	local fee=${1:-0}
	if [ $(bc <<<"$fee > 30") -eq 1 ]; then
		COLOR="\033[32m" # green
	elif [ $(bc <<<"$fee > 10") -eq 1 ]; then
		COLOR="\033[34m" # blue
	elif [ $(bc <<<"$fee > 3") -eq 1 ]; then
		COLOR="\033[33m" # yellow
	elif [ $(bc <<<"$fee > 1") -eq 1 ]; then
		COLOR="\033[31m" # red
	fi
}

_ustb_time() {
	start_time=$(date +%s%3N)
	"$@"
	end_time=$(date +%s%3N)

	echo $((end_time - start_time))
}

ustb_speedtest() {
	local speed
	local r_value
	local -i elapsed_time

	local -i file_size=${1:-500} # defualt 500 M

	# Testing download speed

	echo "Test file size: ${file_size} MB"

	r_value=$(awk -v seed=$RANDOM 'BEGIN { srand(seed); printf "%.16f\n", rand() }')

	elapsed_time=$(
		_ustb_time \
			curl -s \
			"http://speed.ustb.edu.cn/backend/garbage.php?r=${r_value}&ckSize=${file_size}" \
			-o /dev/null
	)
	echo "Elapsed time: ${elapsed_time} ms"

	speed=$(echo "scale=2; $file_size * 1000 / $elapsed_time" | bc)

	echo "Average download speed: ${speed} MB/s"
	echo

	# Test upload speed

	echo "Test file size: ${file_size} MB"
	r_value=$(awk -v seed=$RANDOM 'BEGIN { srand(seed); printf "%.16f\n", rand() }')

	elapsed_time=$(
		_ustb_time \
			curl -s -X POST \
			-H "Content-Encoding: identity" \
			-d @- \
			"http://speed.ustb.edu.cn/backend/empty.php?r=${r_value}" \
			-o /dev/null < <(head -c "${file_size}M" </dev/urandom)
	)
	echo "Elapsed time: ${elapsed_time} ms"

	speed=$(echo "scale=2; $file_size * 1000 / $elapsed_time" | bc)

	echo "Average upload speed: ${speed} MB/s"
}

# Run in cli mode if no arguments
if [ $# -lt 1 ]; then
	if [ $ENABLE_CLI_MODE -gt 0 ]; then
		# if no arguments and not enabling
		# CLI mode, print help message
		ustb_version
		ustb_help
	else
		# handle exit
		trap _ustb_bye 0

		while read -ep "ustb> " line; do
			_ustb_command $line
		done
	fi
else
	# or excute single command
	_ustb_command $*
	exit $?
fi

