#!/bin/bash

SCRIPTNAME=${0##*/}
VERSION=v1.1

LOGIN_HOST=202.204.48.82
ALWAYS_ATTEMPT_IPV6=1
ALWAYS_USE_DEFAULT_USER=1
WIFI_SKIP_LOGIN="USTB-Student USTB-V6"

# Bouncing commands to functions
_ustb_command() {
	# ignore empty line
	[ $# -lt 1 ] && return

	command=$1
	shift

	# check if command exisists
	type -t "ustb_$command" >/dev/null
	[ $? -ne 0 ] && {
		[ "$command" == "exit" ] && exit 0
		echo "$SCRIPTNAME: '$command' is not a command. See '$SCRIPTNAME help'."
		return 1
	}
	# excute
	ustb_$command
}

# Capture exit
_ustb_bye() {
	printf "Bye-bye.\n"
}

_ustb_flow() {
	local flow=$1
	if [ $(echo "$flow / 1024 < 1" | bc) -eq 1 ]; then
		printf "%s KB" $flow
	elif [ $(echo "$flow / 1024^2 < 1" | bc) -eq 1 ]; then
		printf "%s MB" $(echo "scale=2; $flow / 1024" | bc)
	elif [ $(echo "$flow / 1024^2 < 9000" | bc) -eq 1 ]; then
		printf "%s GB" $(echo "scale=2; $flow / 1024^2" | bc)
	elif [ $(echo "$flow / 1024^3 > 1" | bc) -eq 1 ]; then
		printf "%s TB" $(echo "scale=2; $flow / 1024^3" | bc)
	fi
}

ustb_help() {
	cat <<END
Usage: $SCRIPTNAME [options] <command>
Commands:
login		login to USTB web
logout		logout of USTB web
whoami		show current user
fee		show network fees left
info		show further flow infomation
version		show version and authors
help		show this information

END
}

ustb_version() {
	cat <<INFO
$SCRIPTNAME $VERSION - A utility script for USTB web.
Copyright 2020		Shuaicheng Zhu <jason23347@gmail.com>

INFO
}

ustb_info() {
	local v4_only=0

	# fetch login page info
	local res=$(curl -s $LOGIN_HOST | iconv -f GBK -t UTF-8)

	# LOGIN check
	echo "$res" | grep "flow=" 2>&1 >/dev/null
	[ $? -ne 0 ] && {
		echo "Login required."
		return 1
	}

	# IPV6 check
	v46m=$(echo "$res" | grep ";v46m=" | sed "s/.*v46m=//;s/;.*//")
	[ $v46m -eq 4 ] || [ $v46m -eq 12 ] || v4_only=1

	# IPV4 flow
	local flow=$(echo "$res" | grep "flow=" |
		sed "s/.*flow='//;s/[[:space:]].*//")

	# IPV4 fee
	local fee=$(echo "$res" | grep "fee=" |
		sed "s/.*fee='//;s/[[:space:]].*//")

	# IPV6 upload flow
	local flow_v6=$(echo "$res" | grep "v6af=" |
		sed "s/.*v6af=//;s/;.*//")/4

	printf "\033[34mIPV4\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep "v4ip=" | sed "s/.*v4ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow)

INFO

	[ $v4_only -eq 1 ] && {
		cat <<INFO
IPV6 not found.

INFO
		return 0
	}

	printf "\033[32mIPV6\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep "v6ip=" | sed "s/.*v6ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow_v6)

Flow Saving rate (%):	$(echo "scale=2; $flow_v6 / ($flow_v6 + $flow)" | bc)

INFO
}

ustb_fee() {
	local res=$(curl -s $LOGIN_HOST)

	# Default color
	local COLOR_FEE="\033[0m"
	local COLOR_="\033[0m"

	# cost
	local flow=$(echo "$res" | grep "flow=" |
		sed "s/.*flow='//;s/[[:space:]].*//")
	local cost=$(echo "scale=2; $flow / (1024 ^ 2) / 1.5" | bc)

	# fee
	local fee=$(echo "$res" | grep 'fee=' |
		sed "s/.*fee='//;s/[[:space:]].*//")
	fee=$(echo "scale=2;$fee/10000" | bc)

	# set color
	if [ $(bc <<<"$fee > 30") -eq 1 ]; then
		COLOR_FEE="\033[32m"
	elif [ $(bc <<<"$fee > 10") -eq 1 ]; then
		COLOR_FEE="\033[34m"
	elif [ $(bc <<<"$fee > 3") -eq 1 ]; then
		COLOR_FEE="\033[33m"
	elif [ $(bc <<<"$fee > 1") -eq 1 ]; then
		COLOR_FEE="\033[31m"
	fi

	# set color
	if [ $(bc <<<"$cost < 10") -eq 1 ]; then
		COLOR_COST="\033[32m"
	elif [ $(bc <<<"$cost < 30") -eq 1 ]; then
		COLOR_COST="\033[34m"
	elif [ $(bc <<<"$cost < 50") -eq 1 ]; then
		COLOR_COST="\033[33m"
	else
		COLOR_COST="\033[31m"
	fi

	printf "Money Cost: ${COLOR_COST}￥%s\033[0m\n" $cost
	printf "Money left: ${COLOR_FEE}￥%s\033[0m\n\n" $fee
}

ustb_whoami() {
	printf "Current user: %s\n" \
		$(curl -s $LOGIN_HOST | grep ';uid' |
			iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")
}

ustb_login() {
	# Check ESSID
	ESSID=$(/sbin/iwconfig 2>/dev/null | grep ESSID | awk '{print $4}' |
		sed 's/ESSID://;s/"//g')
	grep $ESSID 2>&1 1>/dev/null <<<$WIFI_SKIP_LOGIN && {
		echo "warn: Auto logged in to $ESSID."
		# return
	}

	local res=$(curl -s $LOGIN_HOST | grep ';uid')
	[ $? -eq 0 ] && username=$(echo "$res" |
		iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")

	# Input username or use default
	if [ -n username ] && [ $ALWAYS_USE_DEFAULT_USER -ne 1 ]; then
		read -n1 -ep "Login as $username? [Y/n]" yn
		[[ $yn =~ N|n ]] &&
			read -ep "Username: " username
	else
		read -ep "Username: " username
	fi

	# Input password
	read -sep "Passeord: " password
	[ $ALWAYS_ATTEMPT_IPV6 -gt 0 ] && has_v6=y ||
		read -n1 -ep "Enable IPV6 address?[y/N]" has_v6

	# Fetch IPV6 address
	[[ "$has_v6" =~ (y|Y) ]] && {
		printf "\nfetching IPV6 address..."
		ip_addr=$(curl -s cippv6.ustb.edu.cn/get_ip.php |
			grep "gIpV6Addr" |
			sed "s/.*= '//;s/';.*//")
		printf "$ip_addr.\n"
	}

	# Do login
	res=$(curl -s --retry 3 \
		-d "DDDDD=$username&upass=$password&0MKKey=123456789&v6ip=$ip_addr" \
		"$LOGIN_HOST" | grep "You have successfully logged into our system")
	echo "Login succeeded."
}

ustb_logout() {
	curl -s "$LOGIN_HOST/F.htm" >/dev/null
	if [ $? -eq 0 ]; then
		echo "Logout succeed."
	else
		echo "Logout failed."
	fi
}

# Run in cli mode if no arguments,
[ $# -lt 1 ] && {
	trap _ustb_bye 0

	while read -ep "ustb> " line; do
		_ustb_command $line
	done
} || {
	# or excute single command
	_ustb_command $*
	exit $?
}
