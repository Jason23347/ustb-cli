#!/bin/bash

SCRIPTNAME=${0##*/}
VERSION=v1.1

LOGIN_HOST=202.204.48.82
ALWAYS_ATTEMPT_IPV6=1
ALWAYS_USE_DEFAULT_USER=1
WIFI_SKIP_LOGIN="USTB-Student USTB-V6"

CLOCK_FORCE_UPDATE=1
CLOCK_DATE_FORMAT="%a %b %d %p"

# Bouncing commands to functions
_ustb_command() {
	# ignore empty line
	[ $# -lt 1 ] && return

	command=$1
	shift

	# check if command exisists
	type -t "ustb_$command" >/dev/null
	[ $? -ne 0 ] && {
		[ "$command" == "exit" ] && exit 0
		echo "$SCRIPTNAME: '$command' is not a command. See '$SCRIPTNAME help'."
		return 1
	}
	# excute
	ustb_$command
}

# Capture exit
_ustb_bye() {
	printf "Bye-bye.\n"
	tput cnorm
	clear
}

_ustb_flow() {
	local flow=$1
	if [ $(echo "$flow / 1024 < 1" | bc) -eq 1 ]; then
		printf "%s KB" $flow
	elif [ $(echo "$flow / 1024^2 < 1" | bc) -eq 1 ]; then
		printf "%s MB" $(echo "scale=2; $flow / 1024" | bc)
	elif [ $(echo "$flow / 1024^2 < 9000" | bc) -eq 1 ]; then
		printf "%s GB" $(echo "scale=2; $flow / 1024^2" | bc)
	elif [ $(echo "$flow / 1024^3 > 1" | bc) -eq 1 ]; then
		printf "%s TB" $(echo "scale=2; $flow / 1024^3" | bc)
	fi
}

ustb_help() {
	cat <<END
Usage: $SCRIPTNAME [options] <command>
Commands:
login		login to USTB web
logout		logout of USTB web
clock		display a clock with flow info
whoami		show current user
fee		show network fees left
info		show further flow infomation
version		show version and authors
help		show this information

END
}

ustb_version() {
	cat <<INFO
$SCRIPTNAME $VERSION - A utility script for USTB web.
Copyright 2020		Shuaicheng Zhu <jason23347@gmail.com>

INFO
}

ustb_info() {
	local v4_only=0

	# fetch login page info
	local res=$(curl -s $LOGIN_HOST | iconv -f GBK -t UTF-8)

	# LOGIN check
	echo "$res" | grep "flow=" 2>&1 >/dev/null
	[ $? -ne 0 ] && {
		echo "Login required."
		return 1
	}

	# IPV6 check
	v46m=$(echo "$res" | grep ";v46m=" | sed "s/.*v46m=//;s/;.*//")
	[ $v46m -eq 4 ] || [ $v46m -eq 12 ] || v4_only=1

	# IPV4 flow
	local flow=$(echo "$res" | grep "flow=" |
		sed "s/.*flow='//;s/[[:space:]].*//")

	# IPV4 fee
	local fee=$(echo "$res" | grep "fee=" |
		sed "s/.*fee='//;s/[[:space:]].*//")

	# IPV6 upload flow
	local flow_v6=$(echo "$res" | grep "v6af=" |
		sed "s/.*v6af=//;s/;.*//")/4

	printf "\033[34mIPV4\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep "v4ip=" | sed "s/.*v4ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow)

INFO

	[ $v4_only -eq 1 ] && {
		cat <<INFO
IPV6 not found.

INFO
		return 0
	}

	printf "\033[32mIPV6\033[0m\n"
	cat <<INFO
IP address:	$(echo "$res" | grep "v6ip=" | sed "s/.*v6ip='//;s/'.*//")
Flow:		$(_ustb_flow $flow_v6)

Flow Saving rate (%):	$(echo "scale=2; $flow_v6 / ($flow_v6 + $flow)" | bc)

INFO
}

ustb_fee() {
	local res=$(curl -s $LOGIN_HOST)

	# Default color
	local COLOR_FEE="\033[0m"
	local COLOR_="\033[0m"

	# cost
	local flow=$(echo "$res" | grep "flow=" |
		sed "s/.*flow='//;s/[[:space:]].*//")
	local cost=$(echo "scale=2; $flow / (1024 ^ 2) / 1.5" | bc)

	# fee
	local fee=$(echo "$res" | grep 'fee=' |
		sed "s/.*fee='//;s/[[:space:]].*//")
	fee=$(echo "scale=2;$fee/10000" | bc)

	# set color
	if [ $(bc <<<"$fee > 30") -eq 1 ]; then
		COLOR_FEE="\033[32m"
	elif [ $(bc <<<"$fee > 10") -eq 1 ]; then
		COLOR_FEE="\033[34m"
	elif [ $(bc <<<"$fee > 3") -eq 1 ]; then
		COLOR_FEE="\033[33m"
	elif [ $(bc <<<"$fee > 1") -eq 1 ]; then
		COLOR_FEE="\033[31m"
	fi

	# set color
	if [ $(bc <<<"$cost < 10") -eq 1 ]; then
		COLOR_COST="\033[32m"
	elif [ $(bc <<<"$cost < 30") -eq 1 ]; then
		COLOR_COST="\033[34m"
	elif [ $(bc <<<"$cost < 50") -eq 1 ]; then
		COLOR_COST="\033[33m"
	else
		COLOR_COST="\033[31m"
	fi

	printf "Money Cost: ${COLOR_COST}￥%s\033[0m\n" $cost
	printf "Money left: ${COLOR_FEE}￥%s\033[0m\n\n" $fee
}

ustb_whoami() {
	printf "Current user: %s\n" \
		$(curl -s $LOGIN_HOST | grep ';uid' |
			iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")
}

ustb_login() {
	# Check ESSID
	ESSID=$(/sbin/iwconfig 2>/dev/null | grep ESSID | awk '{print $4}' |
		sed 's/ESSID://;s/"//g')
	grep $ESSID 2>&1 1>/dev/null <<<$WIFI_SKIP_LOGIN && {
		echo "warn: Auto logged in to $ESSID."
		# return
	}

	local res=$(curl -s $LOGIN_HOST | grep ';uid')
	[ $? -eq 0 ] && username=$(echo "$res" |
		iconv -f GBK -t UTF-8 | sed "s/.*uid='//;s/';.*//")

	# Input username or use default
	if [ -n username ] && [ $ALWAYS_USE_DEFAULT_USER -ne 1 ]; then
		read -n1 -ep "Login as $username? [Y/n]" yn
		[[ $yn =~ N|n ]] &&
			read -ep "Username: " username
	else
		read -ep "Username: " username
	fi

	# Input password
	read -sep "Passeord: " password
	[ $ALWAYS_ATTEMPT_IPV6 -gt 0 ] && has_v6=y ||
		read -n1 -ep "Enable IPV6 address?[y/N]" has_v6

	# Fetch IPV6 address
	[[ "$has_v6" =~ (y|Y) ]] && {
		printf "\nfetching IPV6 address..."
		ip_addr=$(curl -s cippv6.ustb.edu.cn/get_ip.php |
			grep "gIpV6Addr" |
			sed "s/.*= '//;s/';.*//")
		printf "$ip_addr.\n"
	}

	# Do login
	res=$(curl -s --retry 3 \
		-d "DDDDD=$username&upass=$password&0MKKey=123456789&v6ip=$ip_addr" \
		"$LOGIN_HOST" | grep "You have successfully logged into our system")
	echo "Login succeeded."
}

ustb_logout() {
	curl -s "$LOGIN_HOST/F.htm" >/dev/null
	if [ $? -eq 0 ]; then
		echo "Logout succeed."
	else
		echo "Logout failed."
	fi
}

ustb_clock() {
	# refresh screen
	tput clear
	# make cursor invisible
	tput civis

	while :; do
		# get tty size
		# array, 0: height, 1: length
		tty_size=$(stty size)

		# minute hour
		date_string=$(date +"%M %l")
		_ustb_draw_clock $tty_size $date_string
		[ $? -ne 0 ] && return 1

		sleep 0.1
	done
}

_ustb_reset_tty_size() {
	sleep 0.2
	tput clear
	tty_size=$(stty size)
	unset dots second
}

trap _ustb_reset_tty_size SIGWINCH

_ustb_draw_clock() {
	local -i tty_height=$1
	local -i tty_width=$2

	# Avoid recognizing '08' as octal number
	local -i minute=$(echo $3 | sed 's/^0//')
	local -i hour=$(echo $4 | sed 's/^0//')

	# Calculate positions
	# width x height:
	# 4 spaces between digits, 4x4
	# 4 digits, 4x5
	# 1 dots, 1x3
	padding_x=$((($tty_width - 39) / 2))
	padding_y=$((($tty_height - 16) / 2))

	[ $padding_x -lt 0 ] || [ $padding_y -lt 0 ] && {
		echo "Error: Minimum tty size 16x40 required" >&2
		return 1
	}

	[ -v dots ] || {
		_ustb_draw_dots $(($padding_x + 18)) $padding_y
		dots=true
	}

	[ $CLOCK_FORCE_UPDATE -eq 0 ] &&
		[ ${min_0:--1} -eq $(($minute % 10)) ] &&
		return

	min_0=$(($minute % 10))
	_ustb_draw_digit_${min_0} $(($padding_x + 34)) $padding_y

	# update every minute
	[ ${second:-0} -eq 0 ] &&
		_ustb_draw_info $tty_width $(($padding_y + 12))
	second=$(date +%S | sed 's/^0//')

	[ $CLOCK_FORCE_UPDATE -eq 0 ] &&
		[ ${min_1:--1} -eq $(($minute - $min_0)) ] &&
		return

	min_1=$((($minute - $min_0) / 10))
	_ustb_draw_digit_${min_1} $(($padding_x + 25)) $padding_y

	[ $CLOCK_FORCE_UPDATE -eq 0 ] &&
		[ ${hour_0:--1} -eq $(($hour % 10)) ] &&
		return

	hour_0=$(($hour % 10))
	_ustb_draw_digit_${hour_0} $(($padding_x + 9)) $padding_y

	[ $CLOCK_FORCE_UPDATE -eq 0 ] &&
		[ ${hour_1:--1} -eq $(($hour - $hour_0)) ] &&
		return

	hour_1=$((($hour - $hour_0) / 10))
	_ustb_draw_digit_${hour_1} $padding_x $padding_y

	_ustb_draw_date $tty_width $(($padding_y + 10))
}

_ustb_draw_info() {
	local len
	local res=$(curl -s $LOGIN_HOST)

	local padding_x=$((($1 - 27) / 2))
	tput sc

	# IPV4 flow
	local flow=$(echo "$res" | grep "flow=" |
		sed "s/.*flow='//;s/[[:space:]].*//")
	flow=$(_ustb_flow $flow)

	# IPV6 flow
	local flow_v6=$(echo "$res" | grep "v6af=" |
		sed "s/.*v6af=//;s/;.*//")/4
	flow_v6=$(_ustb_flow $flow_v6)

	# fee
	local fee=$(echo "$res" | grep 'fee=' |
		sed "s/.*fee='//;s/[[:space:]].*//")
	fee=$(echo "scale=2;$fee/10000" | bc)

	# set color
	if [ $(bc <<<"$fee > 30") -eq 1 ]; then
		COLOR_FEE="\033[32m"
	elif [ $(bc <<<"$fee > 10") -eq 1 ]; then
		COLOR_FEE="\033[34m"
	elif [ $(bc <<<"$fee > 3") -eq 1 ]; then
		COLOR_FEE="\033[33m"
	elif [ $(bc <<<"$fee > 1") -eq 1 ]; then
		COLOR_FEE="\033[31m"
	fi

	tput cup $2 $padding_x
	printf "IPV4 Flow:"
	len=${#flow}
	for ((i = 0; i < 17 - $len; i++)); do
		printf " "
	done
	printf "%s" "$flow"

	tput cup $(($2 + 1)) $padding_x
	printf "IPV6 Flow:"
	len=${#flow_v6}
	for ((i = 0; i < 17 - $len; i++)); do
		printf " "
	done
	printf "%s" "$flow_v6"

	tput cup $(($2 + 2)) $padding_x
	printf "Fee Left:"
	len=${#fee}
	for ((i = 0; i < 18 - $len; i++)); do
		printf " "
	done
	printf "$COLOR_FEE%s\033[0m" "$fee"
}

_ustb_draw_date() {
	# Format: Mon Oct 12 PM
	local str=$(date +"$CLOCK_DATE_FORMAT")
	local len=${#str}
	local padding_x=$((($1 - $len) / 2))
	tput sc
	tput cup $2 $padding_x
	printf "%s" "$str"
}

EMPTY=" "
POINT="\033[46m \033[0m"

_ustb_draw_dots() {
	local -i x=$1
	local -i y=$2
	tput sc

	x+=1
	y+=2
	tput cup $y $x
	printf "$POINT"
	y+=4
	tput cup $y $x
	printf "$POINT"
}

_ustb_draw_digit_0() {
	local -i x=$1
	local -i y=$2
	tput sc

	tput cup $y $x
	printf "$POINT $POINT $POINT"
	for ((i = 0; i < 3; i++)); do
		y+=2
		tput cup $y $x
		printf "$POINT $EMPTY $POINT"
	done

	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
}

_ustb_draw_digit_1() {
	local -i x=$1
	local -i y=$2
	tput sc

	for ((i = 0; i < 5; i++)); do
		tput cup $y $x
		# 0 1 0
		printf "$EMPTY $POINT $EMPTY"
		y+=2
	done
}

_ustb_draw_digit_2() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1
	# 0 0 1
	# 1 1 1
	# 1 0 0
	# 1 1 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $EMPTY"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
}

_ustb_draw_digit_3() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1

	# 0 0 1
	# 1 1 1
	# 0 0 1
	# 1 1 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	for ((i = 0; i < 2; i++)); do
		y+=2
		tput cup $y $x
		printf "$EMPTY $EMPTY $POINT"
		y+=2
		tput cup $y $x
		printf "$POINT $POINT $POINT"
	done
}

_ustb_draw_digit_4() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 0 1
	# 1 0 1
	# 1 1 1
	# 1 0 1
	# 0 0 1
	tput cup $y $x
	printf "$POINT $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"
}

_ustb_draw_digit_5() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1
	# 1 0 0
	# 1 1 1
	# 0 0 1
	# 1 1 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $EMPTY"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
}

_ustb_draw_digit_6() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1
	# 1 0 0
	# 1 1 1
	# 1 0 1
	# 1 1 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $EMPTY"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
}

_ustb_draw_digit_7() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1

	# 0 0 1
	# 0 0 1
	# 0 0 1
	# 0 0 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	for ((i = 0; i < 4; i++)); do
		y+=2
		tput cup $y $x
		printf "$EMPTY $EMPTY $POINT"
	done
}

_ustb_draw_digit_8() {
	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1

	# 1 0 1
	# 1 1 1
	# 1 0 1
	# 1 1 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	for ((i = 0; i < 2; i++)); do
		y+=2
		tput cup $y $x
		printf "$POINT $EMPTY $POINT"
		y+=2
		tput cup $y $x
		printf "$POINT $POINT $POINT"
	done
}

_ustb_draw_digit_9() {
	local -i x=$1
	local -i y=$2
	tput sc

	local -i x=$1
	local -i y=$2
	tput sc

	# 1 1 1
	# 1 0 1
	# 1 1 1
	# 0 0 1
	# 0 0 1
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$POINT $POINT $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"
	y+=2
	tput cup $y $x
	printf "$EMPTY $EMPTY $POINT"

}

# handle exit
trap _ustb_bye 0

# Run in cli mode if no arguments,
[ $# -lt 1 ] && {
	while read -ep "ustb> " line; do
		_ustb_command $line
	done
} || {
	# or excute single command
	_ustb_command $*
	exit $?
}
